#include <TinyGPS++.h>
#include <SoftwareSerial.h>
/*
   This sample code demonstrates the normal use of a TinyGPS++ (TinyGPSPlus) object.
   It requires the use of SoftwareSerial, and assumes that you have a
   4800-baud serial GPS device hooked up on pins 4(rx) and 3(tx).
*/
static const int RXPin = 13, TXPin = 11;
static const uint32_t GPSBaud = 9600;

// The TinyGPS++ object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

int led = 12;
int vs = 9;
int Xpin = A0;
int Ypin = A1;
int Spin = 2;
int Xval;
int Yval;
int Sval;
int dt = 200;
//int gPin1 = 3;
//float LEDVal1;
//int gPin2 = 4;
//float LEDVal2;
//int gPin3 = 5;
//float LEDVal3;
//int gPin4 = 6;
//float LEDVal4;
//int gPin5 = 7;
//float LEDVal5;

void setup()
{
  Serial.begin(115200);
  ss.begin(GPSBaud);

  pinMode(led, OUTPUT);
  pinMode(vs, INPUT);

  Serial.println(F("FullExample.ino"));
  Serial.println(F("An extensive example of many interesting TinyGPS++ features"));
  Serial.print(F("Testing TinyGPS++ library v. ")); Serial.println(TinyGPSPlus::libraryVersion());
  Serial.println(F("by Mikal Hart"));
  Serial.println();
  Serial.println(F("Sats HDOP  Latitude   Longitude   Fix  Date       Time     Date Alt    Course Speed Card  Distance Course Card  Chars Sentences Checksum  Vibration  Joystick Joystick Joystick"));
  Serial.println(F("           (deg)      (deg)       Age                      Age  (m)    --- from GPS ----  ---- to London  ----  RX    RX        Fail      (unit)     X        Y        S"));
  Serial.println(F("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"));
  pinMode(Xpin, INPUT);
  pinMode(Ypin, INPUT);
  pinMode(Spin, INPUT);
  digitalWrite(Spin, HIGH);
  //pinMode(gPin1, OUTPUT);
  //pinMode(gPin2, OUTPUT);
  //pinMode(gPin3, OUTPUT);
  //pinMode(gPin4, OUTPUT);
  //pinMode(gPin5, OUTPUT);
}

void loop()
{
  long measurement = vibration();
  long measurement2 = joystick_x();
  long measurement3 = joystick_y();
  long measurement4 = joystick_s();
  delay(50);
  //Serial.println(measurement);

  if (measurement >= 100){
    digitalWrite(led, HIGH);
    //Serial.println(measurement);
    static const double LONDON_LAT = 51.508131, LONDON_LON = -0.128002;

    printInt(gps.satellites.value(), gps.satellites.isValid(), 5);
    printFloat(gps.hdop.hdop(), gps.hdop.isValid(), 6, 1);
    printFloat(gps.location.lat(), gps.location.isValid(), 11, 6);
    printFloat(gps.location.lng(), gps.location.isValid(), 12, 6);
    printInt(gps.location.age(), gps.location.isValid(), 5);
    printDateTime(gps.date, gps.time);
    printFloat(gps.altitude.meters(), gps.altitude.isValid(), 7, 2);
    printFloat(gps.course.deg(), gps.course.isValid(), 7, 2);
    printFloat(gps.speed.kmph(), gps.speed.isValid(), 6, 2);
    printStr(gps.course.isValid() ? TinyGPSPlus::cardinal(gps.course.deg()) : "*** ", 6);

    unsigned long distanceKmToLondon =
      (unsigned long)TinyGPSPlus::distanceBetween(
        gps.location.lat(),
        gps.location.lng(),
        LONDON_LAT, 
        LONDON_LON) / 1000;
    printInt(distanceKmToLondon, gps.location.isValid(), 9);

    double courseToLondon =
      TinyGPSPlus::courseTo(
        gps.location.lat(),
        gps.location.lng(),
        LONDON_LAT, 
        LONDON_LON);

    printFloat(courseToLondon, gps.location.isValid(), 7, 2);

    const char *cardinalToLondon = TinyGPSPlus::cardinal(courseToLondon);

    printStr(gps.location.isValid() ? cardinalToLondon : "*** ", 6);

    printInt(gps.charsProcessed(), true, 6);
    printInt(gps.sentencesWithFix(), true, 10);
    printInt(gps.failedChecksum(), true, 10);
    printInt(measurement, true, 11);
    printInt(measurement2, true, 9);
    printInt(measurement3, true, 9);
    printInt(measurement4, true, 9);
    Serial.println();
  
    // smartDelay(1000);

    if (millis() > 5000 && gps.charsProcessed() < 10)
      Serial.println(F("No GPS data received: check wiring"));
  }
  else{
    digitalWrite(led, LOW);
  }  
  Xval = analogRead(Xpin);
  Yval = analogRead(Ypin);
  Sval = digitalRead(Spin);
  int delay(dt);
  //Serial.print(Xval);
  //Serial.print(Yval);
  //Serial.println(Sval);
  //analogWrite(gPin1, 0);
  //analogWrite(gPin2, 0);
  //analogWrite(gPin3, 0);
  //analogWrite(gPin4, 0);
  //analogWrite(gPin5, 0);
  //if (Xval > 509) {
    //analogWrite(gPin1, 255);
    //analogWrite(gPin2, 0);
    //analogWrite(gPin3, 0);
    //analogWrite(gPin4, 0);
  //}
  //else if (Xval < 489) {
    //analogWrite(gPin2, 255);
    //analogWrite(gPin1, 0);
    //analogWrite(gPin3, 0);
    //analogWrite(gPin4, 0);
  //}
  //if (Yval > 523) {
    //Serial.print(Yval);
    //analogWrite(gPin3, 255);
    //analogWrite(gPin1, 0);
    //analogWrite(gPin2, 0);
    //analogWrite(gPin4, 0);
  //}
  //else if (Yval < 503) {
    //analogWrite(gPin4, 255);
    //analogWrite(gPin1, 0);
    //analogWrite(gPin2, 0);
    //analogWrite(gPin3, 0);
  //}
  //if (Sval == 0) {
    //analogWrite(gPin5, 255);
  //}
  //else if (Sval == 1) {
    //analogWrite(gPin5, 0);
  //}
}

// This custom version of delay() ensures that the gps object
// is being "fed".
static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);
}

static void printFloat(float val, bool valid, int len, int prec)
{
  if (!valid)
  {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  }
  else
  {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1); // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3 : vi >= 10 ? 2 : 1;
    for (int i=flen; i<len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}

static void printInt(unsigned long val, bool valid, int len)
{
  char sz[32] = "*****************";
  if (valid)
    sprintf(sz, "%ld", val);
  sz[len] = 0;
  for (int i=strlen(sz); i<len; ++i)
    sz[i] = ' ';
  if (len > 0) 
    sz[len-1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t)
{
  if (!d.isValid())
  {
    Serial.print(F("********** "));
  }
  else
  {
    char sz[32];
    sprintf(sz, "%02d/%02d/%02d ", d.month(), d.day(), d.year());
    Serial.print(sz);
  }
  
  if (!t.isValid())
  {
    Serial.print(F("******** "));
  }
  else
  {
    char sz[32];
    sprintf(sz, "%02d:%02d:%02d ", t.hour(), t.minute(), t.second());
    Serial.print(sz);
  }

  printInt(d.age(), d.isValid(), 5);
  smartDelay(0);
}

static void printStr(const char *str, int len)
{
  int slen = strlen(str);
  for (int i=0; i<len; ++i)
    Serial.print(i<slen ? str[i] : ' ');
  smartDelay(0);
}

long vibration(){
  long measurement = pulseIn(vs, HIGH);
  // Serial.println(measurement);
  return measurement;
}
long joystick_x(){
  Xval = analogRead(Xpin);
  return Xval;
}
long joystick_y(){
  Yval = analogRead(Ypin);
  return Yval;
}
long joystick_s(){
  Sval = digitalRead(Spin);
  return Sval;
}
